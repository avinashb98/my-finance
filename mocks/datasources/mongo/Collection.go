// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mongo "github.com/avinashb98/myfin/datasources/mongo"
	mock "github.com/stretchr/testify/mock"
)

// Collection is an autogenerated mock type for the Collection type
type Collection struct {
	mock.Mock
}

// FindOne provides a mock function with given fields: _a0, _a1
func (_m *Collection) FindOne(_a0 context.Context, _a1 interface{}) mongo.SingleResult {
	ret := _m.Called(_a0, _a1)

	var r0 mongo.SingleResult
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) mongo.SingleResult); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongo.SingleResult)
		}
	}

	return r0
}

// FindOneAndUpdate provides a mock function with given fields: _a0, _a1, _a2
func (_m *Collection) FindOneAndUpdate(_a0 context.Context, _a1 interface{}, _a2 interface{}) mongo.SingleResult {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 mongo.SingleResult
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}) mongo.SingleResult); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongo.SingleResult)
		}
	}

	return r0
}

// InsertOne provides a mock function with given fields: _a0, _a1
func (_m *Collection) InsertOne(_a0 context.Context, _a1 interface{}) (interface{}, error) {
	ret := _m.Called(_a0, _a1)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) interface{}); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
